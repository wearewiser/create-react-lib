# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  slack: circleci/slack@2.2.0
workflows:
  # START DEVOPS CONFIG
  DevOps:
    jobs:
      - checkout:
          name: "Checkout"
      - env:
          name: "Environment"
          requires:
            - "Checkout"
      - dependencies:
          name: "Dependencies"
          skip: false
          requires:
            - "Environment"
      - config:
          name: "Config"
          skip: false
          CONFIG: ".env"
          requires:
            - "Environment"
      - test:
          name: "Unit Test"
          skip: true
          requires:
            - "Dependencies"
            - "Config"
      - e2e:
          name: "E2E Test"
          skip: true
          requires:
            - "Dependencies"
            - "Config"
      - lint:
          name: "Lint"
          skip: false
          requires:
            - "Dependencies"
            - "Config"
      - audit:
          name: "Audit"
          skip: false
          requires:
            - "Dependencies"
            - "Config"
      - build:
          name: "Build"
          skip: false
          requires:
            - "Unit Test"
            - "E2E Test"
            - "Lint"
            - "Audit"
          BUILD_ALPHA: "npm run build"
          BUILD_BETA: "npm run build"
          BUILD_STABLE: "npm run build"
      - deploy:
          name: "Release/1"
          skip: false
          context: "wiser-mainframe"
          requires:
            - "Build"
          filters:
            branches:
              only: release/1
          # env agnostic
          GITOPS_ORG: ""
          GITOPS_REPO: ""
          # alpha
          GOOGLE_PROJECT_ID_ALPHA: ""
          GOOGLE_COMPUTE_ZONE_ALPHA: ""
          GOOGLE_CLUSTER_ALPHA: ""
          DEPLOYMENT_ALPHA: ""
          CONTAINER_ALPHA: ""
          NAMESPACE_ALPHA: ""
          GITOPS_ALPHA_DEPLOYMENT_PATH: ""
          # beta
          GOOGLE_PROJECT_ID_BETA: ""
          GOOGLE_COMPUTE_ZONE_BETA: ""
          GOOGLE_CLUSTER_BETA: ""
          DEPLOYMENT_BETA: ""
          CONTAINER_BETA: ""
          NAMESPACE_BETA: ""
          GITOPS_BETA_DEPLOYMENT_PATH: ""
          # stable
          GOOGLE_PROJECT_ID_STABLE: ""
          GOOGLE_COMPUTE_ZONE_STABLE: ""
          GOOGLE_CLUSTER_STABLE: ""
          DEPLOYMENT_STABLE: ""
          CONTAINER_STABLE: ""
          NAMESPACE_STABLE: ""
          GITOPS_STABLE_DEPLOYMENT_PATH: ""
      - master:
          name: "Update Master"
          skip: false
          context: "global"
          requires:
            - "Release/1"
      - slack_msg:
          name: "Slack Notification"
          skip: false
          context: "global"
          requires:
            - Release/1
# END DEVOPS CONFIG
jobs:
  checkout:
    docker:
      - image: cimg/node:18.4
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Release Branch Check
          command: |
            export RELEASE="release/.*"
            if [[ "$(git branch | grep \* | cut -d ' ' -f2)" =~ $RELEASE ]] ; then
              echo "Release branch - checking out last tag $(git describe --abbrev=0)" ;
              git checkout $(git describe --abbrev=0)
            else
              echo "Not release branch - moving forward." ;
            fi
      - run:
          name: Load Submodules
          command: |
            git submodule update --init --recursive
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./
  env:
    docker:
      - image: cimg/node:18.4
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: "Setup Variables"
          command: |
            mkdir -p .circleci/ && touch .circleci/env
            export TAG="$(git describe --abbrev=0)"
            export ALPHA="^v?([0-9]+\d*)\.([0-9]+\d*)\.([0-9]+\d*)-alpha((\.[0-9]+)|$)$"
            export BETA="^v?([0-9]+\d*)\.([0-9]+\d*)\.([0-9]+\d*)-beta((\.[0-9]+)|$)$"
            export STABLE="^v?([0-9]+\d*)\.([0-9]+\d*)\.([0-9]+\d*)$"
            if [[ "$TAG" =~ $ALPHA ]] ; then
              echo "export TAG=ALPHA" >> .circleci/env
            elif [[ "$TAG" =~ $BETA ]] ; then
              echo "export TAG=BETA" >> .circleci/env
            elif [[ "$TAG" =~ $STABLE ]] ; then
              echo "export TAG=STABLE" >> .circleci/env
            else
              echo "Unknown tag $TAG"
            fi
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci
  dependencies:
    docker:
      - image: cimg/node:18.4
    parameters:
      skip:
        description: "Skip Dependencies"
        default: false
        type: boolean
    working_directory: ~/project
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            - v2-dependencies-
      - run:
          name: Dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules
  config:
    docker:
      - image: cimg/node:18.4
    parameters:
      CONFIG:
        description: "Config File"
        default: "/dev/null"
        type: string
      skip:
        description: "Skip Config"
        default: false
        type: boolean
    environment:
      CONFIG: << parameters.CONFIG >>
    working_directory: ~/project
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - attach_workspace:
          at: ~/project
      - run:
          name: Load Config
          command: |
            source .circleci/env
            if [[ "$TAG" = "ALPHA" ]] ; then
              echo $ALPHA_CONFIG | base64 -d > "$CONFIG"
            elif [[ "$TAG" = "BETA" ]] ; then
              echo $BETA_CONFIG | base64 -d > "$CONFIG"
            elif [[ "$TAG" = "STABLE" ]] ; then
              echo $STABLE_CONFIG | base64 -d > "$CONFIG"
            else
              echo $DEVELOP_CONFIG | base64 -d > "$CONFIG"
            fi
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./
  test:
    docker:
      - image: cimg/node:18.4
    parameters:
      skip:
        description: "Skip Unit Test"
        default: false
        type: boolean
    working_directory: ~/project
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - attach_workspace:
          at: ~/project
      - run:
          name: Setup
          command: |
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
            sudo apt-get update
            sudo apt-get install -qq -y google-chrome-stable
      - run:
          name: Unit Test
          command: npm run test
  e2e:
    docker:
      - image: cimg/node:18.4
    parameters:
      skip:
        description: "Skip E2E Test"
        default: false
        type: boolean
    working_directory: ~/project
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - attach_workspace:
          at: ~/project
      - run:
          name: Setup
          command: |
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
            sudo apt-get update
            sudo apt-get install -qq -y google-chrome-stable
      - run:
          name: E2E Test
          command: npm run e2e
  lint:
    docker:
      - image: cimg/node:18.4
    parameters:
      skip:
        description: "Skip Lint"
        default: false
        type: boolean
    working_directory: ~/project
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - attach_workspace:
          at: ~/project
      - run:
          name: Lint
          command: npm run lint
  audit:
    docker:
      - image: cimg/node:18.4
    parameters:
      skip:
        description: "Skip Audit"
        default: false
        type: boolean
    working_directory: ~/project
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - attach_workspace:
          at: ~/project
      - run:
          name: Audit
          command: npm audit --production
  build:
    docker:
      - image: cimg/node:18.4
    parameters:
      BUILD_ALPHA:
        description: "The Alpha Build Command"
        default: ""
        type: string
      BUILD_BETA:
        description: "The Beta Build Command"
        default: ""
        type: string
      BUILD_STABLE:
        description: "The Stable Build Command"
        default: ""
        type: string
      skip:
        description: "Skip Build"
        default: false
        type: boolean
    environment:
      BUILD_ALPHA: << parameters.BUILD_ALPHA >>
      BUILD_BETA: << parameters.BUILD_BETA >>
      BUILD_STABLE: << parameters.BUILD_STABLE >>
    working_directory: ~/project
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - attach_workspace:
          at: ~/project
      - run:
          name: Release Branch Check
          command: |
            export RELEASE="release/.*"
            if [[ "$(git branch | grep \* | cut -d ' ' -f2)" =~ $RELEASE ]] ; then
              echo "Release branch - checking out last tag $(git describe --abbrev=0)" ;
              git checkout $(git describe --abbrev=0)
            else
              echo "Not release branch - moving forward." ;
            fi
      - run:
          name: Select Build Command
          command: |
            source .circleci/env
            if [[ "$TAG" = "ALPHA" ]] ; then
              echo "export BUILD=\"$BUILD_ALPHA\"" >> .circleci/env
            elif [[ "$TAG" = "BETA" ]] ; then
              echo "export BUILD=\"$BUILD_BETA\"" >> .circleci/env
            elif [[ "$TAG" = "STABLE" ]] ; then
              echo "export BUILD=\"$BUILD_STABLE\"" >> .circleci/env
            else
              echo "export BUILD=\"$BUILD_STABLE\"" >> .circleci/env
            fi
      - run:
          name: Run Build
          command: |
            source .circleci/env
            eval "$BUILD"
      - run:
          name: Packaging Artifacts
          command: tar czvf /tmp/build.tar.gz `pwd`
      - store_artifacts:
          path: /tmp/build.tar.gz
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./
  deploy:
    docker:
      - image: google/cloud-sdk
    parameters:
      GITOPS_ORG:
        description: "The GitOps Organization"
        default: ""
        type: string
      GITOPS_REPO:
        description: "The GitOps Repository"
        default: ""
        type: string
      GOOGLE_PROJECT_ID_ALPHA:
        description: "The Alpha Google Project ID"
        default: ""
        type: string
      GOOGLE_COMPUTE_ZONE_ALPHA:
        description: "The Alpha Google Compute Zone"
        default: ""
        type: string
      GOOGLE_CLUSTER_ALPHA:
        description: "The Alpha Google Kubernetes Cluster Name"
        default: ""
        type: string
      DEPLOYMENT_ALPHA:
        description: "The Alpha Kubernetes Deployment Name"
        default: ""
        type: string
      CONTAINER_ALPHA:
        description: "The Beta Kubernetes Container Name"
        default: ""
        type: string
      NAMESPACE_ALPHA:
        description: "The Target Alpha Kubernetes Namespace"
        default: ""
        type: string
      GITOPS_ALPHA_DEPLOYMENT_PATH:
        description: "The Path for the Alpha GitPps Deployment Configuration"
        default: ""
        type: string
      GOOGLE_PROJECT_ID_BETA:
        description: "The Beta Google Project ID"
        default: ""
        type: string
      GOOGLE_COMPUTE_ZONE_BETA:
        description: "The Beta Google Compute Zone"
        default: ""
        type: string
      GOOGLE_CLUSTER_BETA:
        description: "The Beta Google Kubernetes Cluster Name"
        default: ""
        type: string
      DEPLOYMENT_BETA:
        description: "The Beta Kubernetes Deployment Name"
        default: ""
        type: string
      CONTAINER_BETA:
        description: "The Beta Kubernetes Container Name"
        default: ""
        type: string
      NAMESPACE_BETA:
        description: "The Target Beta Kubernetes Namespace"
        default: ""
        type: string
      GITOPS_BETA_DEPLOYMENT_PATH:
        description: "The Path for the Beta GitPps Deployment Configuration"
        default: ""
        type: string
      GOOGLE_PROJECT_ID_STABLE:
        description: "The Stable Google Project ID"
        default: ""
        type: string
      GOOGLE_COMPUTE_ZONE_STABLE:
        description: "The Stable Google Compute Zone"
        default: ""
        type: string
      GOOGLE_CLUSTER_STABLE:
        description: "The Stable Google Kubernetes Cluster Name"
        default: ""
        type: string
      DEPLOYMENT_STABLE:
        description: "The Stable Kubernetes Deployment Name"
        default: ""
        type: string
      CONTAINER_STABLE:
        description: "The Stable Kubernetes Container Name"
        default: ""
        type: string
      NAMESPACE_STABLE:
        description: "The Target Stable Kubernetes Namespace"
        default: ""
        type: string
      GITOPS_STABLE_DEPLOYMENT_PATH:
        description: "The Path for the Stable GitPps Deployment Configuration"
        default: ""
        type: string
      skip:
        description: "Skip Deploy"
        default: false
        type: boolean
    environment:
      GITOPS_ORG: << parameters.GITOPS_ORG >>
      GITOPS_REPO: << parameters.GITOPS_REPO >>
      GOOGLE_PROJECT_ID_ALPHA: << parameters.GOOGLE_PROJECT_ID_ALPHA >>
      GOOGLE_COMPUTE_ZONE_ALPHA: << parameters.GOOGLE_COMPUTE_ZONE_ALPHA >>
      GOOGLE_CLUSTER_ALPHA: << parameters.GOOGLE_CLUSTER_ALPHA >>
      DEPLOYMENT_ALPHA: << parameters.DEPLOYMENT_ALPHA >>
      CONTAINER_ALPHA: << parameters.CONTAINER_ALPHA >>
      GITOPS_ALPHA_DEPLOYMENT_PATH: << parameters.GITOPS_ALPHA_DEPLOYMENT_PATH >>
      NAMESPACE_ALPHA: << parameters.NAMESPACE_ALPHA >>
      GOOGLE_PROJECT_ID_BETA: << parameters.GOOGLE_PROJECT_ID_BETA >>
      GOOGLE_COMPUTE_ZONE_BETA: << parameters.GOOGLE_COMPUTE_ZONE_BETA >>
      GOOGLE_CLUSTER_BETA: << parameters.GOOGLE_CLUSTER_BETA >>
      GITOPS_BETA_DEPLOYMENT_PATH: << parameters.GITOPS_BETA_DEPLOYMENT_PATH >>
      DEPLOYMENT_BETA: << parameters.DEPLOYMENT_BETA >>
      CONTAINER_BETA: << parameters.CONTAINER_BETA >>
      NAMESPACE_BETA: << parameters.NAMESPACE_BETA >>
      GOOGLE_PROJECT_ID_STABLE: << parameters.GOOGLE_PROJECT_ID_STABLE >>
      GOOGLE_COMPUTE_ZONE_STABLE: << parameters.GOOGLE_COMPUTE_ZONE_STABLE >>
      GOOGLE_CLUSTER_STABLE: << parameters.GOOGLE_CLUSTER_STABLE >>
      DEPLOYMENT_STABLE: << parameters.DEPLOYMENT_STABLE >>
      CONTAINER_STABLE: << parameters.CONTAINER_STABLE >>
      NAMESPACE_STABLE: << parameters.NAMESPACE_STABLE >>
      GITOPS_STABLE_DEPLOYMENT_PATH: << parameters.GITOPS_STABLE_DEPLOYMENT_PATH >>
    working_directory: ~/project
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - attach_workspace:
          at: ~/project
      - run:
          name: Release Branch Check
          command: |
            export RELEASE="release/.*"
            if [[ "$(git branch | grep \* | cut -d ' ' -f2)" =~ $RELEASE ]] ; then
              echo "Release branch - checking out last tag $(git describe --abbrev=0)" ;
              git checkout $(git describe --abbrev=0)
            else
              echo "Not release branch - moving forward." ;
            fi
      - attach_workspace:
          at: ~/project
      - run:
          name: "Setup Variables"
          command: |
            source .circleci/env
            if [[ "$TAG" = "ALPHA" ]] ; then
              echo "export GOOGLE_PROJECT_ID=$GOOGLE_PROJECT_ID_ALPHA" >> .circleci/env
              echo "export GOOGLE_COMPUTE_ZONE=$GOOGLE_COMPUTE_ZONE_ALPHA" >> .circleci/env
              echo "export GOOGLE_CLUSTER=$GOOGLE_CLUSTER_ALPHA" >> .circleci/env
              echo "export DEPLOYMENT=$DEPLOYMENT_ALPHA" >> .circleci/env
              echo "export CONTAINER=$CONTAINER_ALPHA" >> .circleci/env
              echo "export NAMESPACE=$NAMESPACE_ALPHA" >> .circleci/env
              echo "export GITOPS_DEPLOYMENT_PATH=$GITOPS_ALPHA_DEPLOYMENT_PATH" >> .circleci/env
            elif [[ "$TAG" = "BETA" ]] ; then
              echo "export GOOGLE_PROJECT_ID=$GOOGLE_PROJECT_ID_BETA" >> .circleci/env
              echo "export GOOGLE_COMPUTE_ZONE=$GOOGLE_COMPUTE_ZONE_BETA" >> .circleci/env
              echo "export GOOGLE_CLUSTER=$GOOGLE_CLUSTER_BETA" >> .circleci/env
              echo "export DEPLOYMENT=$DEPLOYMENT_BETA" >> .circleci/env
              echo "export CONTAINER=$CONTAINER_BETA" >> .circleci/env
              echo "export NAMESPACE=$NAMESPACE_BETA" >> .circleci/env
              echo "export GITOPS_DEPLOYMENT_PATH=$GITOPS_BETA_DEPLOYMENT_PATH" >> .circleci/env
            elif [[ "$TAG" =~ "STABLE" ]] ; then
              echo "export GOOGLE_PROJECT_ID=$GOOGLE_PROJECT_ID_STABLE" >> .circleci/env
              echo "export GOOGLE_COMPUTE_ZONE=$GOOGLE_COMPUTE_ZONE_STABLE" >> .circleci/env
              echo "export GOOGLE_CLUSTER=$GOOGLE_CLUSTER_STABLE" >> .circleci/env
              echo "export DEPLOYMENT=$DEPLOYMENT_STABLE" >> .circleci/env
              echo "export CONTAINER=$CONTAINER_STABLE" >> .circleci/env
              echo "export NAMESPACE=$NAMESPACE_STABLE" >> .circleci/env
              echo "export GITOPS_DEPLOYMENT_PATH=$GITOPS_STABLE_DEPLOYMENT_PATH" >> .circleci/env
            else
              echo "Unknown tag $TAG"
              exit 1
            fi
      - run:
          name: Setup Google Cloud SDK
          command: |
            source .circleci/env
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER}
      - run:
          name: Submit Build
          command: |
            source .circleci/env
            gcloud builds submit --tag gcr.io/${GOOGLE_PROJECT_ID}/${DEPLOYMENT}:$(git describe --abbrev=0) .
      - run:
          name: Sync GitOps Repo
          command: |
            source .circleci/env
            curl -sL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 > ./yq && chmod +x ./yq
            git clone https://${GITOPS_USER}:${GITOPS_PASS}@github.com/${GITOPS_ORG}/${GITOPS_REPO}.git /tmp/${GITOPS_REPO}
            kubectl annotate kubernetes.io/change-cause="Release $(git describe --abbrev=0)" --namespace ${NAMESPACE} --local --dry-run=client -o yaml -f <( kubectl set image deployment ${DEPLOYMENT} ${CONTAINER}=gcr.io/${GOOGLE_PROJECT_ID}/${DEPLOYMENT}:$(git describe --abbrev=0) --namespace ${NAMESPACE} --dry-run=client -o yaml ) | ./yq eval 'del(.status)' | grep -v 'resourceVersion\|uid\|generation\|creationTimestamp\|deployment.kubernetes.io\/revision' > /tmp/${GITOPS_REPO}/${GITOPS_DEPLOYMENT_PATH}
            git -C /tmp/${GITOPS_REPO} add .
            git -C /tmp/${GITOPS_REPO} -c user.name="$(git log -1 --pretty=format:'%an')" -c user.email="$(git log -1 --pretty=format:'%ae')" commit --author "$(git log -1 --pretty=format:'%an <%ae>')" -m "Deployment ${DEPLOYMENT} updated to version $(git describe --abbrev=0), changes to ${GITOPS_DEPLOYMENT_PATH}"
            git -C /tmp/${GITOPS_REPO} push
      - run:
          name: Rollout
          command: |
            source .circleci/env
            kubectl apply -f /tmp/${GITOPS_REPO}/${GITOPS_DEPLOYMENT_PATH}
            kubectl rollout status deployment/${DEPLOYMENT} --namespace=${NAMESPACE}
  master:
    docker:
      - image: cimg/node:18.4
    parameters:
      skip:
        description: "Skip Master Update"
        default: false
        type: boolean
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - checkout
      - run:
          name: Release Branch Check
          command: |
            export RELEASE="release/.*"
            if [[ "$(git branch | grep \* | cut -d ' ' -f2)" =~ $RELEASE ]] ; then
              echo "Release branch - checking out last tag $(git describe --abbrev=0)" ;
              git checkout $(git describe --abbrev=0)
            else
              echo "Not release branch - moving forward." ;
            fi
      - run:
          name: Evaluate Tags
          command: |
            export STABLE="^v?([0-9]+\d*)\.([0-9]+\d*)\.([0-9]+\d*)$"
            if [[ "$(git describe --abbrev=0)" =~ $STABLE ]] ; then
              echo "Update master" ;
            else
              echo "Do not update master" ;
              circleci-agent step halt
            fi
      - run:
          name: Setup Git
          command: |
            git config user.email "engineering@wearewiser.com"
            git config user.name "CircleCI"
      - run:
          name: Update Master
          command: git branch -f master HEAD
      - run:
          name: Checkout Master
          command: git checkout master
      - run:
          name: Push Master
          command: |
            echo "$(echo $CIRCLE_REPOSITORY_URL | sed s/:/\\//g | sed s/git@/https\:\\/\\/${GITHUB_TOKEN}@/g)"
            git push "$(echo $CIRCLE_REPOSITORY_URL | sed s/:/\\//g | sed s/git@/https\:\\/\\/${GITHUB_TOKEN}@/g)" master
  slack_msg:
    docker:
      - image: cimg/node:18.4
    parameters:
      skip:
        description: "Skip Slack Release Notification"
        default: false
        type: boolean
    steps:
      - when:
          condition: <<parameters.skip>>
          steps:
            - run:
                name: Skip
                command: circleci-agent step halt
      - checkout
      - slack/notify:
          message: "Release ${CIRCLE_PROJECT_REPONAME}@$(git describe --abbrev=0) deployed"
          color: "#5031aa"
          webhook: "${SLACK_HOOK}"
          include_visit_job_action: true
          include_project_field: true
